<class>
<keyword>class</keyword>

<identifier>Main</identifier>

<symbol>{</symbol>

<subroutineDec>
<keyword>function</keyword>

<keyword>void</keyword>

<identifier>main</identifier>

<symbol>(</symbol>

<parameterList>
</parameterList>
<symbol>)</symbol>

<symbol>{</symbol>

<subroutineBody>
<varDec>
<keyword>var</keyword>

<keyword>int</keyword>

<identifier>a</identifier>

<symbol>,</symbol>

<identifier>b</identifier>

<symbol>,</symbol>

<identifier>c</identifier>

<symbol>;</symbol>

</varDec>
<varDec>
<keyword>var</keyword>

<identifier>Array</identifier>

<identifier>arr</identifier>

<symbol>;</symbol>

</varDec>
<statements>
<letStatement>
<keyword>let</keyword>

<identifier>a</identifier>

<symbol>=</symbol>

<expression>
<term>
<integerConstant>5</integerConstant>

</term>
</expression>
<symbol>;</symbol>

</letStatement>
<letStatement>
<keyword>let</keyword>

<identifier>b</identifier>

<symbol>=</symbol>

<expression>
<term>
<integerConstant>10</integerConstant>

</term>
</expression>
<symbol>;</symbol>

</letStatement>
<letStatement>
<keyword>let</keyword>

<identifier>c</identifier>

<symbol>=</symbol>

<expression>
<term>
<identifier>a</identifier>

</term>
<symbol>+</symbol>

<term>
<identifier>b</identifier>

</term>
<symbol>*</symbol>

<term>
<symbol>(</symbol>

<expression>
<term>
<integerConstant>2</integerConstant>

</term>
<symbol>+</symbol>

<term>
<integerConstant>3</integerConstant>

</term>
</expression>
<symbol>)</symbol>

</term>
</expression>
<symbol>;</symbol>

</letStatement>
<letStatement>
<keyword>let</keyword>

<identifier>arr</identifier>

<symbol>=</symbol>

<expression>
<term>
<identifier>Array</identifier>

<symbol>.</symbol>

<identifier>new</identifier>

<symbol>(</symbol>

<expressionList>
<expression>
<term>
<integerConstant>3</integerConstant>

</term>
</expression>
</expressionList>
<symbol>)</symbol>

</term>
</expression>
<symbol>;</symbol>

</letStatement>
<letStatement>
<keyword>let</keyword>

<identifier>arr</identifier>

<symbol>[</symbol>

<expression>
<term>
<integerConstant>0</integerConstant>

</term>
</expression>
<symbol>]</symbol>

<symbol>=</symbol>

<expression>
<term>
<identifier>c</identifier>

</term>
</expression>
<symbol>;</symbol>

</letStatement>
<letStatement>
<keyword>let</keyword>

<identifier>arr</identifier>

<symbol>[</symbol>

<expression>
<term>
<integerConstant>1</integerConstant>

</term>
</expression>
<symbol>]</symbol>

<symbol>=</symbol>

<expression>
<term>
<identifier>a</identifier>

</term>
<symbol>+</symbol>

<term>
<identifier>b</identifier>

</term>
</expression>
<symbol>;</symbol>

</letStatement>
<letStatement>
<keyword>let</keyword>

<identifier>arr</identifier>

<symbol>[</symbol>

<expression>
<term>
<integerConstant>2</integerConstant>

</term>
</expression>
<symbol>]</symbol>

<symbol>=</symbol>

<expression>
<term>
<identifier>arr</identifier>

<symbol>[</symbol>

<expression>
<term>
<integerConstant>0</integerConstant>

</term>
</expression>
<symbol>]</symbol>

</term>
<symbol>+</symbol>

<term>
<identifier>arr</identifier>

<symbol>[</symbol>

<expression>
<term>
<integerConstant>1</integerConstant>

</term>
</expression>
<symbol>]</symbol>

</term>
</expression>
<symbol>;</symbol>

</letStatement>
<ifStatement>
<keyword>if</keyword>

<symbol>(</symbol>

<expression>
<term>
<identifier>arr</identifier>

<symbol>[</symbol>

<expression>
<term>
<integerConstant>2</integerConstant>

</term>
</expression>
<symbol>]</symbol>

</term>
<symbol>&gt;</symbol>

<term>
<integerConstant>20</integerConstant>

</term>
</expression>
<symbol>)</symbol>

<symbol>{</symbol>

<statements>
<doStatement>
<keyword>do</keyword>

<identifier>Output</identifier>

<symbol>.</symbol>

<identifier>printString</identifier>

<symbol>(</symbol>

<expressionList>
<expression>
<term>
<stringConstant>Greater than 20</stringConstant>

</term>
</expression>
</expressionList>
<symbol>)</symbol>

<symbol>;</symbol>

</doStatement>
</statements>
<symbol>}</symbol>

<keyword>else</keyword>

<symbol>{</symbol>

<statements>
<doStatement>
<keyword>do</keyword>

<identifier>Output</identifier>

<symbol>.</symbol>

<identifier>printString</identifier>

<symbol>(</symbol>

<expressionList>
<expression>
<term>
<stringConstant>Less or equal to 20</stringConstant>

</term>
</expression>
</expressionList>
<symbol>)</symbol>

<symbol>;</symbol>

</doStatement>
</statements>
<symbol>}</symbol>

</ifStatement>
<whileStatement>
<keyword>while</keyword>

<symbol>(</symbol>

<expression>
<term>
<identifier>a</identifier>

</term>
<symbol>&lt;</symbol>

<term>
<identifier>b</identifier>

</term>
</expression>
<symbol>)</symbol>

<symbol>{</symbol>

<statements>
<letStatement>
<keyword>let</keyword>

<identifier>a</identifier>

<symbol>=</symbol>

<expression>
<term>
<identifier>a</identifier>

</term>
<symbol>+</symbol>

<term>
<integerConstant>1</integerConstant>

</term>
</expression>
<symbol>;</symbol>

</letStatement>
<doStatement>
<keyword>do</keyword>

<identifier>Output</identifier>

<symbol>.</symbol>

<identifier>printInt</identifier>

<symbol>(</symbol>

<expressionList>
<expression>
<term>
<identifier>a</identifier>

</term>
</expression>
</expressionList>
<symbol>)</symbol>

<symbol>;</symbol>

</doStatement>
</statements>
<symbol>}</symbol>

</whileStatement>
<doStatement>
<keyword>do</keyword>

<identifier>Output</identifier>

<symbol>.</symbol>

<identifier>printString</identifier>

<symbol>(</symbol>

<expressionList>
<expression>
<term>
<stringConstant>Done!</stringConstant>

</term>
</expression>
</expressionList>
<symbol>)</symbol>

<symbol>;</symbol>

</doStatement>
<returnStatement>
<keyword>return</keyword>

<symbol>;</symbol>

</returnStatement>
</statements>
</subroutineBody>
<symbol>}</symbol>

</subroutineDec>
<symbol>}</symbol>

</class>
